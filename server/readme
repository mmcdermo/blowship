Readme for proof of concept of Blowship implementation
Authors:
- John Carlyle
- Morgan McDermott

Files:
- Server.py:
   Launch using python Server.py
   Will generate RSA keys and listen on port 8000
- Client.py
  Launch using python Client.py username [optional IP addr]
  localhost is assumed if IP is omitted.
  List of commands:
       :genkey - generates RSA keypair
       :setkey - sets the current users keys on the server you are currently connected to.
       :ks     - Get list of keys of users on the server (need this to send messages)
       :ls     - Get list of users who are currently connected to the server (need this to send messages)
       :send name message here of arbitrary length - Sends a message to 'name' through the network. Currently very buggy because of our RSA library.

Instructions:
- Launch a server and two clients with different names
- Each client needs to perform the folliwing commands: :genkey, :setkey
- After that each client needs to perform two more commands: :ks, :ls
- Now the two clients should be able to communicate with :send otherClientLoginName hey there client!
- Poorly chosen RSA lib causes occasional crashing.

Bugs:
- RSA Lib is awful. I made the mistake of trusting a random RSA lib I found on github because the interface with it looked really easy. Bad idea. Bad Idea. BAD IDEA.
      Our implementation is currently bound to this terrible library because it takes in an ascii string and returns a list of longs in python.
      In order to encrypt this agian I decided it would be a good idea to pickle this into another string so it could be encrypted again. 
      Pickling the object and sending it over a socket occasionally causes it to lose its EOF signal causing the server to choke trying to depickle it.
      This does not seem to ever happen if circuits of size 1 are used (just send to server then to target). 
- RSA is very slow. This implementation seems to be slower than others. 
- RSA bloats the output size much more then needed. Need to repackage as ascii again. This means that encrypting multiple times is incredibly slow. 
- The above two bugs cause circuits of size 2 to deliver in anywhere from 30 seconds to 2 minutes. Circuits of length 3 will never complete. 
      Lesson learned, vet libraries much more thuroughly before using them.
- If a message is sent before :ks and :ls it will cause a painful crash that will disconnect from the server, but the server never checks for this.
     So upon reconnecting the sockets are not connected correctly and messages can still not be sent. Solution tear it all down and start over.

Future Work:
- Lots...
- Set up symmetric keys between clients for speed.
- Use better RSA lib. Possibly ElGamal instead.
- Paralelization needs to be optimized
- GUI
- This is just a proof of concept wirtten in python. Needs to be ported to JS and still have random numbers.


Closing thoughts
Even with all the bugs we did manage to get 5 people communicating on thet jenkity serer all at once and were capable of communicatiing (granted this was with circuits of length 1, meaning only two encrpytion layers per message). In the future if we were to implement this in a browser setting. The server would be in C or something that can do the encryption/decryption very quickly. The javascript would have to be very carefully written (possibly using websockets) and have very carefully chosen encryption libraries. Both for security and speed reasons.